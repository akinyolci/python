 Özel ders 1.bölüm---------------------------------------------------------------------------------------------------------------------------------------------------------------



#Algorithm: Belirli bir problemi adım adım giderek çözmemize denir.
"
Örnek: Bir insanın yürümesini algoritmik olarak belirt.
1. Yürü : bu algortima değildir, algoritma her adımı mala anlatırmış gibi bilgisayara anlatmaktır.
bacağını kaldır indir öne at ayak dur.
"
-----------------------------------------------------------------------
#Flowchart: Algoritmalarımızı görsel şekilde planlamak için kullandığımız şablonlar. https://app.diagrams.net/
"
oval: start / end
paralel: input
dörtgen: akış
diamond: koşullar yazılır
oklar: akış yönü
hybrid: output
"
-----------------------------------------------------------------------
#Pseudocode: Algoritmamızı kod dahilinde yazmamıza verilen addır. Yorum şeklinde de kod içine yazılabilir // """ """ #  şeklinde
"
BEGIN ProgramName:
Read input
Print output
END
"

koşullu olunca
"
BEGIN makeToast:
…
IF(you want butter)
Spread butter on the toast with a knife
ELSE IF(you want Nutella)
Spread Nutella on the toast with a knife
END
"
---------------------------------------------------------------------

ŞUANA KADAR HER ŞEYİ İÇEREN BİR ÖRNEK YAPALIM!

ÖRNEK:

Calculate the average of three 
numbers: 3, 5, and 7. 

---------------------------------------------------------------------
#Trace Table: algoritmamızı yazdıktan sonra tabloda belirli variable ları input edip output ve line ların doğru değerlerde olup olmadığı öğrenmemizi sağlar. İleride bunun çok daha kompleks
olan DEBUG metodlarını göreceğiz.




ÖZEL DERS ALGORİTMALAR 2. BÖLÜM--------------------------------------------------------------------------------------------------------------------------------------------------

---SORTING ALGORITHMS---

Nedir? Sorting algoritmalar bir veri topluluğundan istediğimiz verileri çekmemizi, sıralamamızı sağlar.

#Selection Sort 
"""
BEGIN selectionSort:
a = [4, 6, 3, 8, 1, 7, 5, 2]
n = a.length - 1
m = 0
while(m < n)
min = Select min of a[m..n]
Swap a[m] and min
m++
END

#Merged Sort
"""

"""
ÖZEL DERS TİME COMPLEXITY--------------------------------------------------------------------------------------------------------------------------------------------------------

#SPACE EFFICIENCY

#TIME EFFICIENCY


